services:
  db:
    image: postgres:18-alpine
    container_name: yuna-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - ${POSTGRES_PORT}:5432
    networks:
      - yuna
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:8-alpine
    container_name: yuna-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - yuna
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: yuna-api
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public
      - API_PORT=8080
      - NODE_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - UPDATE_CHECK_INTERVAL=${UPDATE_CHECK_INTERVAL:-60000}
      - HEALTHCHECK_PATH=${HEALTHCHECK_PATH:-/health}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - yuna
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO- http://yuna:${API_PORT:-8080}${HEALTHCHECK_PATH} || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: yuna-web
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - API_URL=http://api:8080
      - VITE_API_URL=http://api:8080
    depends_on:
      api:
        condition: service_started
    ports:
      - "${WEB_PORT:-3000}:3000"
    networks:
      - yuna
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

volumes:
  db_data:

networks:
  yuna:
    driver: bridge
